[{"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/index.js":"1","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/store.js":"2","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/App.js":"3","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/rootReducer.js":"4","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Login/Login.js":"5","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NewAccount/NewAccount.js":"6","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Login/LoginReducer.js":"7","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Login/LoginContainer.js":"8","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Login/LoginActions.js":"9","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Main/Main.js":"10","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Main/MainContainer.js":"11","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/MainNav/MainNavContainer.js":"12","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/MainNav/MainNav.js":"13","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/SideBar/SideBar.js":"14","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatItem/ChatItem.js":"15","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/SideBar/SideBarContainer.js":"16","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatHeader/ChatHeaderContainer.js":"17","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatHeader/ChatHeader.js":"18","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatBody/ChatBodyContainer.js":"19","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatBody/ChatBody.js":"20","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Message/MessageContainer.js":"21","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Message/Message.js":"22","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatBody/ChatBodyActions.js":"23","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatItem/ChatItemContainer.js":"24","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatItem/ChatItemActions.js":"25","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/SideBar/SideBarActions.js":"26","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/utils/socket-middleware.js":"27","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Main/MainActions.js":"28","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/FriendSearch/FriendSearchContainer.js":"29","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/FriendSearch/FriendSearch.js":"30","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/FriendItem/FriendItem.js":"31","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/FriendItem/FriendItemContainer.js":"32","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/FriendItem/FriendItemActions.js":"33","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/utils/socket-error-reducer.js":"34","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NotificationItem/NotificationItem.js":"35","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NotificationItem/NotificationItemContainer.js":"36","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NotificationItem/NotificationItemActions.js":"37","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/MainNav/MainNavActions.js":"38","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NewGroup/NewGroup.js":"39","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NewGroup/NewGroupContainer.js":"40","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NewGroup/NewGroupActions.js":"41","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/SideBar/SideBarReducer.js":"42","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/WelcomeBody/WelcomeBody.js":"43","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatHeader/ChatHeaderActions.js":"44","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Profile/Profile.js":"45","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Profile/ProfileContainer.js":"46","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/GroupItem/GroupItem.js":"47"},{"size":541,"mtime":1610442935137,"results":"48","hashOfConfig":"49"},{"size":891,"mtime":1610442871754,"results":"50","hashOfConfig":"49"},{"size":634,"mtime":1610359833070,"results":"51","hashOfConfig":"49"},{"size":435,"mtime":1609650473863,"results":"52","hashOfConfig":"49"},{"size":6173,"mtime":1610442533919,"results":"53","hashOfConfig":"49"},{"size":8029,"mtime":1609902796116,"results":"54","hashOfConfig":"49"},{"size":785,"mtime":1609841712804,"results":"55","hashOfConfig":"49"},{"size":494,"mtime":1609841827416,"results":"56","hashOfConfig":"49"},{"size":245,"mtime":1609841807518,"results":"57","hashOfConfig":"49"},{"size":2982,"mtime":1610359678436,"results":"58","hashOfConfig":"49"},{"size":494,"mtime":1609844635778,"results":"59","hashOfConfig":"49"},{"size":458,"mtime":1609371110775,"results":"60","hashOfConfig":"49"},{"size":4638,"mtime":1610441784992,"results":"61","hashOfConfig":"49"},{"size":4098,"mtime":1609902830288,"results":"62","hashOfConfig":"49"},{"size":1162,"mtime":1609630625015,"results":"63","hashOfConfig":"49"},{"size":499,"mtime":1609628437061,"results":"64","hashOfConfig":"49"},{"size":451,"mtime":1609818162049,"results":"65","hashOfConfig":"49"},{"size":873,"mtime":1609818496536,"results":"66","hashOfConfig":"49"},{"size":405,"mtime":1609651970792,"results":"67","hashOfConfig":"49"},{"size":3016,"mtime":1609898544569,"results":"68","hashOfConfig":"49"},{"size":232,"mtime":1608442202017,"results":"69","hashOfConfig":"49"},{"size":973,"mtime":1609803297845,"results":"70","hashOfConfig":"49"},{"size":687,"mtime":1609898372095,"results":"71","hashOfConfig":"49"},{"size":284,"mtime":1608636198762,"results":"72","hashOfConfig":"49"},{"size":0,"mtime":1608636264966,"results":"73","hashOfConfig":"49"},{"size":342,"mtime":1609631890922,"results":"74","hashOfConfig":"49"},{"size":6674,"mtime":1609898926901,"results":"75","hashOfConfig":"49"},{"size":178,"mtime":1608851859442,"results":"76","hashOfConfig":"49"},{"size":302,"mtime":1608883499567,"results":"77","hashOfConfig":"49"},{"size":2659,"mtime":1609902751021,"results":"78","hashOfConfig":"49"},{"size":2453,"mtime":1609902889639,"results":"79","hashOfConfig":"49"},{"size":568,"mtime":1609483905035,"results":"80","hashOfConfig":"49"},{"size":479,"mtime":1609483935080,"results":"81","hashOfConfig":"49"},{"size":406,"mtime":1609233519131,"results":"82","hashOfConfig":"49"},{"size":1672,"mtime":1609482614517,"results":"83","hashOfConfig":"49"},{"size":740,"mtime":1609482511630,"results":"84","hashOfConfig":"49"},{"size":1167,"mtime":1609482497006,"results":"85","hashOfConfig":"49"},{"size":225,"mtime":1609371444184,"results":"86","hashOfConfig":"49"},{"size":2823,"mtime":1609892159962,"results":"87","hashOfConfig":"49"},{"size":399,"mtime":1609455837880,"results":"88","hashOfConfig":"49"},{"size":160,"mtime":1609676565181,"results":"89","hashOfConfig":"49"},{"size":491,"mtime":1609819151034,"results":"90","hashOfConfig":"49"},{"size":781,"mtime":1609895611912,"results":"91","hashOfConfig":"49"},{"size":614,"mtime":1609819172096,"results":"92","hashOfConfig":"49"},{"size":4412,"mtime":1610440589901,"results":"93","hashOfConfig":"49"},{"size":287,"mtime":1610419343489,"results":"94","hashOfConfig":"49"},{"size":335,"mtime":1610438667236,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7n2hzo",{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"102"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"102"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"102"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"102"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"102"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"102"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"102"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/index.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/store.js",["207"],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/App.js",[],["208","209"],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/rootReducer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Login/Login.js",["210","211"],"import React from 'react';\nimport './Login.scss';\nimport { Modal } from 'reactstrap';\n\n// Child Components:\nimport NewAccount from '../NewAccount/NewAccount';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Redirect } from 'react-router';\nimport * as crypto from 'crypto';\n// require('crypto').randomBytes(64).toString('hex')\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Login\n      userName: \"\",\n      password: \"\",\n      // Modal\n      modal: false,\n      redirect: false\n    };\n    // SetOnChange (State Managing Callback)\n    this.setOnChange = this.setOnChange.bind(this);\n    // Guest Login Handler\n    this.guestLoginHandler = this.guestLoginHandler.bind(this);\n    // Login Request Handler\n    this.handleLogin = this.handleLogin.bind(this);\n    // Modal Trigger\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  componentWillMount() {\n    if (this.props.AccountDetails) {\n      if (this.props.AccountDetails.acc_data !== {}) {\n        this.setState({ redirect: true });\n      }\n    }\n  }\n\n  /*\n  Future Refactors: handleLogin(event) should be done through TCP socket conenction\n  as opposed to a HTTP Post handler to reduce incoming server traffic.\n  */\n  handleLogin(event) {\n    // 1. Verify the account username exists (/w the corresponding password).\n    event.preventDefault();\n    fetch(`${window.location.protocol}//${window.location.host}/api/authenticate/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: this.state.userName,\n        password: this.state.password\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        // If Unsuccesfful:\n        // Trigger Alert/Feedback\n        if ('code' in data) {\n          // Control FeedBack.\n        }\n        // If Succesful:\n        // Save account details to redux state.\n        // Redirect to Messaging Page.\n        else {\n          // Should be a single account stored onto Redux Store.\n          this.props.storeAccountDetails(data['account'][0]);\n          this.props.storeTokenDetails({\n            accessToken: data['accessToken'],\n            refreshToken: data['refreshToken']\n          });\n          // Redirect Page To Other Main Page Component.\n          this.setState({ redirect: true })\n        }\n      })\n  }\n\n  // Create Account Handlers\n  setOnChange(event) {\n    let fieldID = event.target.id;\n    let obj = {};\n    obj[`${fieldID}`] = event.target.value;\n    this.setState(obj);\n    this.setState({\n      emailinvalid: false,\n      usrinvalid: false,\n      pwinvalid: false\n    })\n  }\n\n  // Handles Modal Triggering\n  toggleModal() {\n    this.setState({ modal: !this.state.modal })\n  }\n\n  //\n  async guestLoginHandler(event) {\n    let randStr = crypto.randomBytes(16).toString('hex');\n    await fetch(`${window.location.protocol}//${window.location.host}/api/authenticate/newaccount`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        nafname: 'Guest',\n        nalname: randStr,\n        nausername: `Guest_${randStr}`,\n        naemailaddr: `Guest_${randStr}`,\n        napassword1: '',\n        napassword2: '',\n        nadobday: 30,\n        nadobmonth: 12,\n        nadobyear: 2020,\n        nagender: 'N'\n      })\n    })\n\n    // 1. Verify the account username exists (/w the corresponding password).\n    event.preventDefault();\n    await fetch(`${window.location.protocol}//${window.location.host}/api/authenticate/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: `Guest_${randStr}`,\n        password: ''\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        // If Unsuccesfful:\n        // Trigger Alert/Feedback\n        if ('code' in data) {\n          // Control FeedBack.\n        }\n        // If Succesful:\n        // Save account details to redux state.\n        // Redirect to Messaging Page.\n        else {\n          // Should be a single account stored onto Redux Store.\n          this.props.storeAccountDetails(data['account'][0]);\n          this.props.storeTokenDetails({\n            accessToken: data['accessToken'],\n            refreshToken: data['refreshToken']\n          });\n          // Redirect Page To Other Main Page Component.\n          this.setState({ redirect: true })\n        }\n      })\n  }\n\n  render() {\n    return (\n      <>\n        {/* Redirect Initiative */}\n        {this.state.redirect == true\n          ?\n          <Redirect to=\"/main\" />\n          :\n          null\n        }\n        <div className=\"wrapper fadeInDown\" onSubmit={this.handleLogin}>\n          <div id=\"formContent\">\n            <div className=\"wrapper-img fadeIn first\">\n              <img src=\"https://img.icons8.com/cute-clipart/256/000000/chat.png\" id=\"icon\" />\n            </div>\n\n            <form>\n              <input type=\"text\" id=\"userName\" className=\"fadeIn second\" name=\"userName\" placeholder=\"Username\" onChange={this.setOnChange} />\n              <input type=\"password\" id=\"password\" className=\"fadeIn third\" name=\"password\" placeholder=\"Password\" onChange={this.setOnChange} />\n              <input type=\"submit\" className=\"fadeIn fourth\" value=\"Log In\" />\n            </form>\n\n            {/* Uncomment when you want to create nodemailer dependency with this app! */}\n            <div className=\"formContent-guest-login\">\n              <button className=\"guest-login fadeIn fourth\" onClick={this.guestLoginHandler}>Log In As Guest</button>\n            </div>\n\n            <div id=\"formFooter\">\n              <button className=\"createAccount fadeIn fifth\" onClick={this.toggleModal}>Create Account</button>\n              {/* newAccount Modal */}\n              <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n                <NewAccount />\n              </Modal>\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default Login;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NewAccount/NewAccount.js",["212","213","214"],"import React from 'react';\nimport { ModalHeader, ModalBody, ModalFooter, Label, Input, Form, FormGroup, FormFeedback } from 'reactstrap';\n\nimport './NewAccount.scss';\n\nclass NewAccount extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // New Account\n      nafname: \"\",\n      nalname: \"\",\n      nausername: \"\",\n      naemailaddr: \"\",\n      napassword1: \"\",\n      napassword2: \"\",\n      nadobday: 1,\n      nadobmonth: 1,\n      nadobyear: (new Date()).getFullYear(),\n      nagender: \"N\",\n      usrinvalid: false,\n      emailinvalid: false,\n      pwinvalid: false,\n    }\n    // SetOnChange (State Managing Callback)\n    this.setOnChange = this.setOnChange.bind(this);\n    // Create Account Request Handler\n    this.handleNewAccount = this.handleNewAccount.bind(this);\n    // Modal Trigger\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  // Create Account Handlers\n  setOnChange(event) {\n    let fieldID = event.target.id;\n    let obj = {};\n    obj[`${fieldID}`] = event.target.value;\n    this.setState(obj);\n    this.setState({\n      emailinvalid: false,\n      usrinvalid: false,\n      pwinvalid: false\n    })\n  }\n\n  // Feedbback Togglers\n  invalidateEmailFeedback() {\n    this.setState({ emailinvalid: true })\n  }\n  invalidateUserFeedback() {\n    this.setState({ usrinvalid: true })\n  }\n  invalidatePasswordFeedback() {\n    this.setState({ pwinvalid: true })\n  }\n\n  handleNewAccount(event) {\n    // Check #1: Check if passwords match:\n    // Check #2 Check if username is being used already:\n    // Check #3 Check if email is being used already:\n    fetch(`${window.location.protocol}//${window.location.host}/api/authenticate/newaccount`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        nafname: this.state.nafname,\n        nalname: this.state.nalname,\n        nausername: this.state.nausername,\n        naemailaddr: this.state.naemailaddr,\n        napassword1: this.state.napassword1,\n        napassword2: this.state.napassword2,\n        nadobday: this.state.nadobday,\n        nadobmonth: this.state.nadobmonth,\n        nadobyear: this.state.nadobyear,\n        nagender: this.state.nagender\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        // If 'data' is an array, then it has errors\n        if (Array.isArray(data)) {\n          // Handles error messages\n          data.map((item, idx) => {\n            if ('code' in item) {\n              switch (item.code) {\n                case \"EMAIL_REGISTERED\":\n                  this.invalidateEmailFeedback();\n                  break;\n                case \"USERNAME_REGISTERED\":\n                  this.invalidateUserFeedback();\n                  break;\n                case \"PASSWORD_MISMATCH\":\n                  this.invalidatePasswordFeedback();\n                  break;\n              }\n            }\n          })\n          // If 'data' is an object, then it has no errors\n        } else {\n          // Close Modal (Probably Trigger an alert or something asw to tell the user they signed up!)\n          this.toggleModal();\n        }\n      })\n  }\n\n  // Handles Modal Triggering\n  toggleModal() {\n    this.setState({ modal: !this.state.modal })\n  }\n\n\n  render() {\n    let days = [];\n    let months = [];\n    let years = [];\n    for (let i = 1; i <= 31; i++) { days.push(i); }\n    for (let i = 1; i <= 12; i++) { months.push(i); }\n    for (let i = 1900; i <= (new Date()).getFullYear(); i++) { years.push(i); }\n    return (\n      <>\n        <ModalHeader toggle={this.toggleModal}><h3>Sign Up</h3></ModalHeader>\n        <ModalBody>\n\n          <Form className=\"createAccount-form container\">\n            <FormGroup className=\"createAccount-form-name\">\n              {/* Name Fields */}\n              <Input type=\"text\" id=\"nafname\" name=\"nafname\" placeholder=\"First Name\" onChange={this.setOnChange} />\n              <Input type=\"text\" id=\"nalname\" name=\"nalname\" placeholder=\"Last Name\" onChange={this.setOnChange} />\n            </FormGroup>\n            {/* Email Field */}\n            <FormGroup className=\"createAccount-form-email\">\n              {\n                this.state.emailinvalid\n                  ?\n                  <Input type=\"text\" id=\"naemailaddr\" name=\"naemailaddr\" placeholder=\"Email Address\" onChange={this.setOnChange} invalid />\n                  :\n                  <Input type=\"text\" id=\"naemailaddr\" name=\"naemailaddr\" placeholder=\"Email Address\" onChange={this.setOnChange} />\n              }\n              <FormFeedback invalid>Emails is taken</FormFeedback>\n            </FormGroup>\n            {/* Username Field */}\n            <FormGroup className=\"createAccount-form-username\">\n              {\n                this.state.usrinvalid ?\n                  <Input invalid type=\"text\" id=\"nausername\" name=\"nausername\" placeholder=\"User Name\" onChange={this.setOnChange} />\n                  :\n                  <Input type=\"text\" id=\"nausername\" name=\"nausername\" placeholder=\"User Name\" onChange={this.setOnChange} />\n              }\n              <FormFeedback invalid>Username is taken</FormFeedback>\n            </FormGroup>\n            {/* Password Fields */}\n            <FormGroup className=\"createAccount-form-password\">\n              {this.state.pwinvalid ?\n                <>\n                  <Input invalid type=\"password\" id=\"napassword1\" name=\"napassword1\" placeholder=\"Password\" onChange={this.setOnChange} />\n                  <Input invalid type=\"password\" id=\"napassword2\" name=\"napassword2\" placeholder=\"Confirm\" onChange={this.setOnChange} />\n                </>\n                :\n                <>\n                  <Input type=\"password\" id=\"napassword1\" name=\"napassword1\" placeholder=\"Password\" onChange={this.setOnChange} />\n                  <Input type=\"password\" id=\"napassword2\" name=\"napassword2\" placeholder=\"Confirm\" onChange={this.setOnChange} />\n                </>\n              }\n              <FormFeedback invalid>You will not be able to see this</FormFeedback>\n            </FormGroup>\n            <FormGroup className=\"createAccount-form-dob\">\n              <div className=\"createAccount-form-dob-label\">\n                <h6>Date Of Birth:</h6>\n              </div>\n              {/* Date Of Birth Selectors: */}\n              <select onChange={this.setOnChange} name=\"nadobday\" id=\"nadobday\" className=\"dob-day\" value={this.state.nadobday}>\n                {days.map((val, idx) => (\n                  <option value={val}>{val}</option>\n                ))\n                }\n              </select>\n              <select onChange={this.setOnChange} name=\"nadobmonth\" id=\"nadobmonth\" className=\"dob-month\" value={this.state.nadobmonth}>\n                {months.map((val, idx) => (\n                  <option value={val}>{val}</option>\n                ))\n                }\n              </select>\n              <select onChange={this.setOnChange} name=\"nadobyear\" id=\"nadobyear\" className=\"dob-year\" value={this.state.nadobyear}>\n                {years.map((val, idx) => (\n                  <option value={val}>{val}</option>\n                ))\n                }\n              </select>\n            </FormGroup>\n            {/* Gender Selector: */}\n            <FormGroup>\n              <div className=\"createAccount-form-gender-label\">\n                <h6>Gender:</h6>\n              </div>\n              <select onChange={this.setOnChange} name=\"nagender\" id=\"nagender\" className=\"createAccount-form-gender\">\n                <option value=\"N\">---Choose A Gender Option---</option>\n                <option value=\"M\">Male</option>\n                <option value=\"F\">Female</option>\n              </select>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter className=\"createAccount-footer\">\n          <button className=\"signUp\" onClick={this.handleNewAccount}>Create Account</button>\n          {/* Adds Space: {' '} */}\n        </ModalFooter>\n      </>\n    )\n  }\n}\n\nexport default NewAccount;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Login/LoginReducer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Login/LoginContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Login/LoginActions.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Main/Main.js",["215","216","217"],"import React from 'react';\n\n// Containers:\nimport MainNav from '../MainNav/MainNavContainer';\nimport SideBar from '../SideBar/SideBarContainer';\nimport ChatHeader from '../ChatHeader/ChatHeaderContainer';\nimport ChatBody from '../ChatBody/ChatBodyContainer';\nimport WelcomeBody from '../WelcomeBody/WelcomeBody';\n\nimport './Main.scss';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authenticated: true\n    }\n  }\n\n  componentWillMount() {\n    // Ideally change this to a check whether sesh_id hasn't expired.\n    if (Object.keys(this.props.AccountDetails.acc_data).length === 0) {\n      // COMMENT OUT FOR UI DEVELOPMENT:\n      this.setState({ authenticated: false });\n    } else {\n      // Emit AccountDetails to emit in the socket middleware client.\n      this.props.emitAccountDetails(this.props.AccountDetails);\n    }\n  }\n\n  render() {\n    console.log(this.props.match);\n    let grps = this.props.AccountDetails.acc_data.acc_grps;\n    let selectedChatGrpIdx = this.props.SideBarDetails.selectedChatItem;\n    if (grps == undefined || selectedChatGrpIdx == undefined) {\n      return (\n        <h1>\n          Not authenticated Please Login Again\n        </h1>\n      )\n    }\n    let viewedGrp = grps[selectedChatGrpIdx - 1];\n    let acc_id = this.props.AccountDetails.acc_data._id;\n    return (\n      this.state.authenticated\n        ?\n        this.props.SocketErrorDetails.errorMessage.name !== 'TokenExpiredError'\n          ?\n          <>\n            <div className=\"main\">\n              <div className=\"main-header\">\n                <MainNav />\n              </div>\n              <div className=\"main-body\">\n                <div className=\"main-body-side\">\n                  <SideBar />\n                </div>\n\n                {this.props.SideBarDetails.selectedChatItem == 0\n                  ?\n                  <div key={uuidv4()} className=\"main-body-content\">\n                    <WelcomeBody accountDetails={this.props.AccountDetails} />\n                  </div>\n                  :\n                  <div key={uuidv4()} className=\"main-body-content\">\n                    <ChatHeader acc_id={acc_id} viewedGrp={viewedGrp} chatName={viewedGrp.g_title} chatType={viewedGrp.g_type} />\n                    <ChatBody viewedGrp={viewedGrp} />\n                  </div>\n                }\n              </div>\n            </div>\n          </>\n          :\n          <>\n            <h1>\n              {`Error Name: ${this.props.SocketErrorDetails.errorMessage.name}`}\n            </h1>\n            <p>\n              {`Error Message: ${this.props.SocketErrorDetails.errorMessage.message}`}\n            </p>\n            <p>\n              {`Expired At: ${Date(this.props.SocketErrorDetails.errorMessage.expiredAt)}`}\n            </p>\n          </>\n        :\n        <>\n          <h1>\n            Not authenticated Please Login Again\n        </h1>\n        </>\n    )\n  }\n}\n\nexport default Main;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Main/MainContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/MainNav/MainNavContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/MainNav/MainNav.js",["218"],"import React from 'react';\n\n// Sass:\nimport './MainNav.scss';\n\n// React Router:\nimport { Link } from 'react-router-dom';\n\n// ReactStrap Dependencies:\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n} from 'reactstrap';\n// uuid Dependency:\nimport { v4 as uuidv4 } from 'uuid';\n\n// React Router Dependencies:\nimport {\n  Redirect\n} from 'react-router';\n\n// Containers:\nimport FriendSearch from '../FriendSearch/FriendSearchContainer';\nimport NotificationItem from '../NotificationItem/NotificationItemContainer';\n\n\nclass MainNav extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      optionsIsOpen: false,\n      notificationsIsOpen: false,\n      newFriendModalState: false,\n      redirectToLogin: false\n    }\n    this.toggleOptions = this.toggleOptions.bind(this);\n    this.toggleNotifications = this.toggleNotifications.bind(this);\n    this.toggleNewFriend = this.toggleNewFriend.bind(this);\n    this.logoutHandler = this.logoutHandler.bind(this);\n  }\n\n  toggleOptions() {\n    this.setState({ optionsIsOpen: !this.state.optionsIsOpen });\n  }\n\n  toggleNotifications() {\n    this.setState({ notificationsIsOpen: !this.state.notificationsIsOpen });\n  }\n\n  toggleNewFriend() {\n    this.setState({ newFriendModalState: !this.state.newFriendModalState });\n  }\n\n  async logoutHandler() {\n    await this.setState({ redirectToLogin: true });\n    await this.props.reInitializeStore();\n  }\n\n  render() {\n    let acc_freqs = this.props.AccountDetails.acc_data.acc_freqs\n    return (\n      <>\n        <div>\n          <Navbar className=\"mainnav\" color=\"light\" light expand=\"md\">\n            <NavbarBrand href=\"/\"><img src=\"https://img.icons8.com/cute-clipart/64/000000/chat.png\" id=\"icon\" /></NavbarBrand>\n            <Nav className=\"mr-auto\"></Nav>\n            {/* Add New User Feature */}\n            <NavLink onClick={this.toggleNewFriend} href=\"#\"><i id=\"new-user\" className=\"fas fa-plus-square\"></i></NavLink>\n            <Modal isOpen={this.state.newFriendModalState} toggle={this.toggleNewFriend} className=\"\">\n              <ModalHeader toggle={this.toggleNewFriend}>Add Friend</ModalHeader>\n              <FriendSearch />\n            </Modal>\n            {/* Notifications Feature Trigger */}\n            {acc_freqs.length > 0\n              ?\n              <NavLink onClick={this.toggleNotifications} href=\"#\">\n                <i id=\"notifications\" className=\"fas fa-bell\"></i>\n                <span class=\"badge\">{acc_freqs.length}</span>\n              </NavLink>\n              :\n              <NavLink onClick={this.toggleNotifications} href=\"#\">\n                <i id=\"notifications\" className=\"fas fa-bell\"></i>\n              </NavLink>\n            }\n            {/* Notifications Feature Body */}\n            <Modal isOpen={this.state.notificationsIsOpen} toggle={this.toggleNotifications} className=\"\">\n              <ModalHeader toggle={this.toggleNotifications}>Friend Requests</ModalHeader>\n              {acc_freqs.map((acc_freq) => {\n                return (\n                  <>\n                    <NotificationItem\n                      key={uuidv4()}\n                      senderId={acc_freq.fr_sender_id._id}\n                      senderData={acc_freq.fr_sender_id}\n                      notificationTitle={`${acc_freq.fr_sender_id.acc_usrname}`}\n                      notificationLabel=\"Friend Request\"\n                      notificationType={'FRIEND_REQUEST'} />\n                  </>\n                )\n              })}\n            </Modal>\n\n            {/* Caret Dropwon Feature */}\n            <UncontrolledDropdown>\n              <DropdownToggle nav>\n                <i className=\"fas fa-caret-down\"></i>\n              </DropdownToggle>\n              <DropdownMenu right>\n                <Link to={`/profile/${this.props.AccountDetails.acc_data._id}`}>\n                  <DropdownItem>\n                    <span><i className=\"fas fa-user\"></i>{\" \"}Profile</span>\n                  </DropdownItem>\n                </Link>\n                <DropdownItem divider />\n                <DropdownItem onClick={this.logoutHandler}>\n                  <span><i className=\"fas fa-power-off\"></i>{\" \"}Logout</span>\n                  {\n                    this.state.redirectToLogin\n                      ?\n                      <Redirect to=\"/\" />\n                      :\n                      null\n                  }\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Navbar>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default MainNav;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/SideBar/SideBar.js",["219","220","221","222","223"],"import React from 'react';\n\n// Reactstrap dependencies:\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter\n} from 'reactstrap';\n\n// uuid\nimport { v4 as uuidv4 } from 'uuid';\n\n//Components:\nimport ChatItem from '../ChatItem/ChatItem';\nimport NewGroupForm from '../NewGroup/NewGroupContainer';\n\n// Style Sheets\nimport './SideBar.scss';\n\nclass SideBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: 0,\n      openModal: false,\n    }\n    this.toggleModal = this.toggleModal.bind(this);\n    this.handleClickEvt = this.handleClickEvt.bind(this);\n  }\n\n  toggleModal() {\n    this.setState({ openModal: !this.state.openModal });\n  }\n\n  handleClickEvt(idx) {\n    this.props.updateSelectedChatItem(idx);\n  }\n\n  // Component Initial State:\n  // Chat Windows For All Friends/Groups\n  // (Get from ACCOUNT_IN entity for the corresponding acc_id stored on redux state)\n  // Consequent Rerenders:\n  // Potentially New Chat Groups (Includes Friends) being added\n  render() {\n    let acc_grps = this.props.AccountDetails.acc_data.acc_grps;\n    return (\n      <>\n        <div className=\"sidebar\">\n          <div className=\"sidebar-header\">\n            <h3>Chats</h3>\n            <button onClick={this.toggleModal} className=\"sidebar-header-newgroup-button\">\n              <i className=\"fas fa-user-plus\"></i>\n            </button>\n            <Modal isOpen={this.state.openModal} toggle={this.toggleModal} className=\"\">\n              <ModalHeader toggle={this.toggleModal}>New Group</ModalHeader>\n              <NewGroupForm toggleModalHandler={this.toggleModal} />\n            </Modal>\n          </div>\n          <hr />\n          {/* Friends/Groups Item Entry */}\n          <div className=\"sidebar-body\">\n            <div onClick={() => this.handleClickEvt(0)}>\n              {0 == this.props.SideBarDetails.selectedChatItem\n                ?\n                <ChatItem\n                  userId={`Welcome ${this.props.AccountDetails.acc_data.acc_usrname}!`}\n                  userMsg={`Click here for more details.`}\n                  key={uuidv4()}\n                  isSelected={true}\n                />\n                :\n                <ChatItem\n                  userId={`Welcome ${this.props.AccountDetails.acc_data.acc_usrname}`}\n                  userMsg={`Click here for more details.`}\n                  key={uuidv4()}\n                  isSelected={false}\n                />\n              }\n            </div>\n            {/* Sample World Chat Component (Will need to create this entity in the DB later on!) */}\n            {/* <div onClick={() => this.handleClickEvt(1)}>\n              {1 == this.props.SideBarDetails.selectedChatItem\n                ?\n                <ChatItem\n                  userId={`World Chat`}\n                  userMsg={`Click here to talk to other users.`}\n                  key={uuidv4()}\n                  isSelected={true}\n                />\n                :\n                <ChatItem\n                  userId={`World Chat`}\n                  userMsg={`Click here to talk to other users.`}\n                  key={uuidv4()}\n                  isSelected={false}\n                />\n              }\n            </div> */}\n            {/* All the ChatGroups the user/account is currently in. */}\n            {\n              acc_grps.map((grp, idx) => (\n                <div onClick={() => this.handleClickEvt(idx + 1)}>\n                  {idx + 1 == this.props.SideBarDetails.selectedChatItem\n                    ?\n                    <ChatItem\n                      userId={grp.g_title}\n                      userMsg={grp.g_type}\n                      key={uuidv4()}\n                      isSelected={true}\n                    />\n                    :\n                    <ChatItem\n                      userId={grp.g_title}\n                      userMsg={grp.g_type}\n                      key={uuidv4()}\n                      isSelected={false}\n                    />}\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default SideBar;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatItem/ChatItem.js",["224"],"import React, { useState } from 'react';\n\nimport './ChatItem.scss';\n\n\nclass ChatItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatName: props.userId,\n      chatMsg: props.userMsg,\n      isSelected: props.isSelected\n    }\n  }\n  // Initial State: Most Recent Message On The Database Via an HTTP request.\n  // Consequent Rerenders: New Dynamic Messages sent to this specific chat \n  // (Requires socket endpoints to emit the corresponding data from the client)\n  // const [chatName, setChatName] = useState(props.userId);\n  // const [chatMsg, setChatMsg] = useState(props.userMsg);\n  // const [isSelected, setSelectedState] = useState(props.isSelected);\n  // console.log(props);\n  render() {\n    return (\n      this.state.isSelected\n        ?\n        // Selected Render\n        <div className=\"chatitem selected\">\n          <h6>{this.state.chatName}</h6>\n          <p>{this.state.chatMsg}</p>\n        </div>\n        :\n        // Not Selected Render\n        <div className=\"chatitem\">\n          <h6>{this.state.chatName}</h6>\n          <p>{this.state.chatMsg}</p>\n        </div>\n    )\n  }\n}\nexport default ChatItem;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/SideBar/SideBarContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatHeader/ChatHeaderContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatHeader/ChatHeader.js",["225","226","227"],"import React, { useState } from 'react';\n\nimport './ChatHeader.scss';\n\nfunction ChatHeader({ chatName, chatType, viewedGrp, leaveGroup, leaveGroupStore, acc_id }) {\n\n  const handleLeaveGroup = () => {\n    leaveGroupStore({\n      g_id: viewedGrp._id,\n    })\n    leaveGroup({\n      g_id: viewedGrp._id,\n      acc_id: acc_id\n    });\n  }\n\n  return (\n    <>\n      <div className=\"chat-header\">\n        <h5>{chatName}</h5>\n        {\n          // 'FRIENDS IS NOT IMPLEMENTED YET, SO FORGET ABOUT IT!'\n          chatType == 'FRIENDS'\n            ?\n            <button>Friends <i className=\"fas fa-check\"></i></button>\n            :\n            (chatType == 'GROUP'\n              ?\n              <button onClick={handleLeaveGroup}>In Group <i className=\"fas fa-check\"></i></button>\n              :\n              null)\n        }\n      </div>\n    </>\n  )\n}\n\nexport default ChatHeader;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatBody/ChatBodyContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatBody/ChatBody.js",["228","229","230","231","232"],"import React from 'react';\n\nimport './ChatBody.scss';\n\n// Containers:\nimport Message from '../Message/MessageContainer';\n\nclass ChatBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messageInput: ''\n    }\n    this.messagesEndRef = React.createRef();\n    this.submitMessageInput = this.submitMessageInput.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  componentDidMount() {\n    this.scrollToBottom()\n  }\n  componentDidUpdate() {\n    this.scrollToBottom()\n  }\n\n  submitMessageInput() {\n    console.log(this.state.messageInput);\n    if (this.state.messageInput !== '') {\n      this.props.sendNewMessage({\n        g_id: this.props.viewedGrp._id,\n        msg_string: this.state.messageInput\n      });\n    }\n  }\n\n  // Scrolls page to bottom (ngl, idk what is really happening here)\n  scrollToBottom = () => {\n    this.messagesEndRef.current.scrollIntoView({ behavior: 'auto' })\n  }\n\n  handleKeyPress(event) {\n    if (event.key == 'Enter') {\n      this.submitMessageInput();\n    }\n  }\n\n  render() {\n    let clientId = this.props.AccountDetails.acc_data._id;\n    let displayMessages = this.props.viewedGrp.g_messages;\n    return (\n      <div className=\"chatbody\">\n        <div className=\"chatbody-messages\">\n          {\n            displayMessages.map((msg, idx, elements) => {\n              return (\n                !(idx + 1 >= elements.length)\n                  ?\n                  (msg.m_sender._id != elements[idx + 1].m_sender._id\n                    ?\n                    // Last message in a row by a specific user.\n                    <Message\n                      senderName={msg.m_sender.acc_usrname}\n                      msgString={msg.msg_string}\n                      isSender={clientId == msg.m_sender._id}\n                      marginBottom={true}\n                    />\n                    :\n                    <Message\n                      senderName={msg.m_sender.acc_usrname}\n                      msgString={msg.msg_string}\n                      isSender={clientId == msg.m_sender._id}\n                      marginBottom={false}\n                    />)\n                  :\n                  <Message\n                    senderName={msg.m_sender.acc_usrname}\n                    msgString={msg.msg_string}\n                    isSender={clientId == msg.m_sender._id}\n                    marginBottom={false}\n                  />\n              )\n            })\n          }\n          <div ref={this.messagesEndRef} />\n        </div>\n        <div className=\"chatbody-form\">\n          <hr />\n          <div className=\"chatbody-form-textbox\">\n            <input onKeyPress={this.handleKeyPress} onChange={(e) => { this.setState({ messageInput: e.target.value }) }} type=\"text\" placeholder=\"Say something...\" />\n            <button onClick={this.submitMessageInput}>\n              <i className=\"fas fa-caret-right fa-3x\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ChatBody;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Message/MessageContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Message/Message.js",["233"],"import React, { useState } from 'react';\n\nimport './Message.scss';\n\nfunction Message({ senderName, msgString, isSender, marginBottom, messageSpan }) {\n\n  return (\n    isSender\n      ?\n      // Sender:\n      (\n        marginBottom\n          ?\n          <div className=\"message sender margin-bottom\">\n            <p>{msgString}</p>\n          </div>\n          :\n          <div className=\"message sender\">\n            <p>{msgString}</p>\n          </div>\n      )\n      :\n      (// Others User Messages:\n        marginBottom\n          ?\n          <>\n            <span className=\"message-span\">{senderName}</span>\n            <div className=\"message reciever margin-bottom\">\n              <p>{msgString}</p>\n            </div>\n          </>\n          :\n          <>\n            <span className=\"message-span\">{senderName}</span>\n            <div className=\"message reciever\">\n              <p>{msgString}</p>\n            </div>\n          </>\n      )\n  )\n}\n\nexport default Message;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatBody/ChatBodyActions.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatItem/ChatItemContainer.js",[],["234","235"],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatItem/ChatItemActions.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/SideBar/SideBarActions.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/utils/socket-middleware.js",["236","237","238","239","240"],"import io from 'socket.io-client';\n\n// Invoke this function to return the corresponding socket-middleware.\nconst createSocketMiddleware = () => {\n    let socket;\n    // Socket Middleware\n    // storeAPI has 'getState' and 'dispatch' as it's fields here.\n    // (Could also use ({dispatch, getState}) in place of 'storeAPI' here)\n    return storeAPI => next => action => {\n        switch (action.type) {\n            // Must dispatch 'LOGIN' action to instantiate socket endpoint.\n            case \"LOGIN\": {\n                // Connect with server.\n                socket = io();\n                /*\n                START: Server => Client Endpoints:\n                */\n                socket.on(\"NEW_FRIEND_REQUEST\", (message) => {\n                    let state = storeAPI.getState();\n                    // Modify acc_data the way the server intends:\n                    let acc_data = state.AccountDetails.acc_data;\n                    acc_data.acc_freqs.push(message.message);\n                    // Dispatch to update Redux Store.\n                    storeAPI.dispatch({\n                        // May need to check whether it is a new:\n                        // 1. Message\n                        // 2. Group\n                        // 3. Friend\n                        // (So I'm suspecting an extra field may be required)\n                        type: message.messageType,\n                        payload: acc_data\n                    });\n                });\n\n                socket.on(\"DELETE_FRIEND_REQUEST\", (message) => {\n                    let state = storeAPI.getState();\n                    // Modify acc_data the way the server intends:\n                    let acc_data = state.AccountDetails.acc_data;\n                    acc_data.acc_freqs.splice(acc_data.acc_freqs.indexOf(message.message), 1);\n                    // Dispatch to update Redux Store.\n                    storeAPI.dispatch({\n                        // May need to check whether it is a new:\n                        // 1. Message\n                        // 2. Group\n                        // 3. Friend\n                        // (So I'm suspecting an extra field may be required)\n                        type: message.messageType,\n                        payload: acc_data\n                    });\n                });\n\n                socket.on(\"FR_ACCEPT\", (message) => {\n                    let state = storeAPI.getState();\n                    let acc_data = state.AccountDetails.acc_data;\n                    acc_data.acc_friends.push(message.message.fr_reciever_id);\n                    console.log(message);\n                    console.log(acc_data);\n\n                    storeAPI.dispatch({\n                        type: message.messageType,\n                        payload: acc_data\n                    })\n                })\n\n                socket.on(\"DELETE_FRIEND\", (message) => {\n                    let { AccountDetails } = storeAPI.getState();\n                    // Modify for data needs:\n                    let acc_friends = AccountDetails.acc_data.acc_friends;\n                    let removeIdx = null;\n                    acc_friends.map((friend, idx) => {\n                        if (friend._id == message.message) {\n                            removeIdx = idx;\n                        }\n                    })\n                    if (!null) {\n                        acc_friends.splice(removeIdx, 1);\n                    }\n                    AccountDetails.acc_data.acc_friends = acc_friends;\n\n                    storeAPI.dispatch({\n                        type: 'UPDATE_ACCOUNT_DETAILS',\n                        payload: AccountDetails.acc_data\n                    })\n                })\n\n                // Chat Groups:\n\n                socket.on(\"NEW_GROUP\", (message) => {\n                    console.log('NEW GROUP:', message);\n                    let { AccountDetails } = storeAPI.getState();\n                    let acc_grps = AccountDetails.acc_data.acc_grps;\n                    acc_grps.push(message.message);\n                    AccountDetails.acc_data._acc_grps = acc_grps;\n                    storeAPI.dispatch({\n                        type: 'UPDATE_ACCOUNT_DETAILS',\n                        payload: AccountDetails.acc_data\n                    })\n                })\n\n                socket.on(\"NEW_MESSAGE\", (message) => {\n                    let { AccountDetails } = storeAPI.getState();\n                    let acc_grps = AccountDetails.acc_data.acc_grps;\n                    acc_grps.map((grp, idx) => {\n                        if (grp._id == message.message.g_id) {\n                            grp.g_messages.push(message.message);\n                        }\n                    })\n                    // console.log(acc_grps);\n                    AccountDetails.acc_data.acc_grps = acc_grps;\n                    storeAPI.dispatch({\n                        type: 'UPDATE_ACCOUNT_DETAILS',\n                        payload: AccountDetails.acc_data\n                    })\n                })\n\n                /*\n                END: Server => Client Endpoints\n                */\n\n                // Server => Client Endpoint for handling server errors.\n                socket.on(\"ERROR_MESSAGE\", (err_message) => {\n                    storeAPI.dispatch({\n                        type: \"SOCKET_ERROR_RECEIVED\",\n                        payload: err_message\n                    });\n                });\n\n                // Client connectivity ends:\n                socket.on('disconnect', () => {\n                    console.log('disconnected');\n                })\n                socket.on('reconnect', () => {\n                    console.log('reconnected');\n                })\n                break;\n            }\n            // Action to Logout:\n            case 'REINITIALIZE_CLIENT': {\n                socket.disconnect();\n                // Move onto the next middleware or reducer to update state.\n                return next(action);\n            }\n            // This endpoint can only be reached once LOGIN action is dispatched\n            // to initialise the socket endpoint on the redux client.\n            case 'SEND_WEBSOCKET_MESSAGE': {\n                let { AccountDetails } = storeAPI.getState();\n                socket.emit('JWT_AUTH', AccountDetails.token_data);\n                socket.off('JWT_AUTH_SUCCESS');\n                socket.on('JWT_AUTH_SUCCESS', () => {\n                    socket.emit(action.eventName, action.payload);\n                })\n                // Do not move onto any further reducer actions.\n                return;\n            }\n        }\n\n        return next(action);\n    }\n}\n\n\nexport default createSocketMiddleware;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Main/MainActions.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/FriendSearch/FriendSearchContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/FriendSearch/FriendSearch.js",["241"],"import React from 'react';\n\nimport {\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './FriendSearch.scss';\n\n// Components:\nimport FriendItem from '../FriendItem/FriendItemContainer';\nimport NotificationItem from '../NotificationItem/NotificationItemContainer';\n\n/*\nForm Body That Controls How The New Friend Feature Adds New Friends.\n*/\nclass FriendSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchString: '',\n      emitSearch: false,\n      searchData: []\n    }\n    this.searchTimeout = null;\n    this.handleSearchAccount = this.handleSearchAccount.bind(this);\n  }\n\n  handleSearchAccount(event) {\n    this.setState({ searchString: event.target.value });\n    clearTimeout(this.searchTimeout);\n    this.searchTimeout = setTimeout(() => {\n      fetch(`${window.location.protocol}//${window.location.host}/api/search/getFriends/${this.props.AccountDetails.acc_data._id}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userNameQuery: event.target.value\n        })\n      })\n        .then(res => res.json())\n        .then(data => {\n          // console.log(data[0]['frStatus']);\n          this.setState({ searchData: data });\n        })\n    }, 3000)\n  }\n\n\n\n  render() {\n    return (\n      <>\n        <ModalBody>\n          {this.state.searchData.map((accountItem) => (\n            accountItem.frStatus == 'R_SENT'\n              ?\n              <NotificationItem\n                key={uuidv4()}\n                senderId={accountItem._id}\n                notificationTitle={accountItem.acc_usrname}\n                notificationLabel=\"Friend Request\"\n                notificationType={'FRIEND_REQUEST'}\n              />\n              :\n              <FriendItem\n                key={uuidv4()}\n                acc_id={accountItem._id}\n                friendStatus={accountItem.frStatus}\n                userName={accountItem.acc_usrname}\n                fname={accountItem.acc_fname}\n                lname={accountItem.acc_lname}\n                searchData={accountItem}\n              />\n          )\n          )}\n          {/* <FriendItem friendStatus={\"PENDING\"} userName=\"Friendbro\" fname=\"Al\" lname=\"Stein\" />\n          <FriendItem friendStatus={\"ACCEPTED\"} userName=\"Requestbro\" fname=\"Jeff\" lname=\"Thew\" /> */}\n\n        </ModalBody>\n        <ModalFooter>\n          <input onChange={this.handleSearchAccount} type=\"text\" placeholder=\"Search Users...\" />\n        </ModalFooter>\n      </>\n    )\n  }\n}\n\nexport default FriendSearch;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/FriendItem/FriendItem.js",["242","243","244","245"],"import React, { useState, useEffect } from 'react';\nimport './FriendItem.scss';\n\nfunction FriendItem(props) {\n\n  const [interactionState, setInteractionState] = useState(props.friendStatus);\n  // 5 JAN 12:06 AM:\n  // FOR SOME REASON THE SEARCH ICON DOES NOT \n  // RERENDER UPON CHANGE THE SEARCH BAR'S REGEX SEARCH EXPRESSION\n\n  // useEffect(() => {\n  //   console.log(props.friendStatus);\n  //   console.log(interactionState);\n  //   if (props.friendStatus !== interactionState) {\n  //     console.log('--SET!--');\n  //     setInteractionState(props.friendStatus);\n  //   }\n  // })\n\n  const sendFriendReq = () => {\n    props.sendFriendReq({\n      sender_id: props.AccountDetails.acc_data._id,\n      reciever_id: props.acc_id\n    });\n    setInteractionState('SENT');\n  }\n  const deleteFriendReq = () => {\n    props.deleteFriendReq({\n      sender_id: props.AccountDetails.acc_data._id,\n      reciever_id: props.acc_id\n    });\n    setInteractionState('UNSENT');\n  }\n  const removeFriend = async () => {\n    props.removeFriend({\n      sender_id: props.AccountDetails.acc_data._id,\n      reciever_id: props.acc_id\n    });\n    setInteractionState('UNSENT');\n  }\n\n  return (\n    <>\n      <div className=\"frienditem\">\n        <div className=\"frienditem-header\">\n          <h6>{props.userName}</h6>\n          <p>{props.fname}{\" \"}{props.lname}</p>\n        </div>\n\n        {\n          <>\n            {interactionState == 'UNSENT'\n              ?\n              <button key={props.AccountDetails.acc_data._id + '_1'} onClick={sendFriendReq} className=\"frienditem-icon\">\n                <i className=\"fas fa-user-plus\"></i>\n              </button>\n\n              :\n              (\n                interactionState == 'SENT'\n                  ?\n                  <button key={props.AccountDetails.acc_data._id + '_2'} onClick={deleteFriendReq} className=\"frienditem-icon\">\n                    <i class=\"fas fa-user-minus\"></i>\n                  </button>\n                  :\n                  (\n                    interactionState == 'FRIENDS'\n                      ?\n                      <button key={props.AccountDetails.acc_data._id + '_3'} onClick={removeFriend} className=\"frienditem-icon\">\n                        <i className=\"fas fa-check\"></i>\n                      </button>\n                      :\n                      null\n                  )\n              )\n            }\n          </>\n        }\n      </div>\n    </>\n  )\n}\n\nexport default FriendItem;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/FriendItem/FriendItemContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/FriendItem/FriendItemActions.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/utils/socket-error-reducer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NotificationItem/NotificationItem.js",["246","247"],"import React, { useState } from 'react';\n\nimport './NotificationItem.scss';\n\nfunction NotificationItem(props) {\n\n  const [notificationType, setNotificationType] = useState(props.notificationType);\n\n  const acceptFriendRequest = () => {\n    // Update the accepting user's redux store to correspond with the the database.\n    props.addFriendToStore(props.senderData);\n    props.acceptFriendRequest({\n      reciever_id: props.AccountDetails.acc_data._id,\n      sender_id: props.senderId\n    });\n    props.removeFriendReqFromStore({\n      sender_id: props.senderId\n    });\n  }\n  const rejectFriendRequest = () => {\n    props.rejectFriendRequest({\n      reciever_id: props.AccountDetails.acc_data._id,\n      sender_id: props.senderId\n    });\n    props.removeFriendReqFromStore({\n      sender_id: props.senderId\n    });\n  }\n\n  return (\n    <>\n      {notificationType == 'FRIEND_REQUEST'\n        ?\n        <div className=\"notification-item\">\n          <div className=\"notification-item-header\">\n            <h6>{props.notificationTitle}</h6>\n            <p>{props.notificationLabel}</p>\n          </div>\n          <div className=\"notification-item-icons\">\n            {/* Accept Friend Request */}\n            <button onClick={acceptFriendRequest} className=\"notification-item-icons-item\">\n              <i className=\"fas fa-check-circle\"></i>\n            </button>\n            {/* Delete Friend Request */}\n            <button onClick={rejectFriendRequest} className=\"notification-item-icons-item\">\n              <i className=\"fas fa-times-circle\"></i>\n            </button>\n          </div>\n        </div>\n        :\n        null}\n    </>\n  )\n}\n\nexport default NotificationItem;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NotificationItem/NotificationItemContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NotificationItem/NotificationItemActions.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/MainNav/MainNavActions.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NewGroup/NewGroup.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NewGroup/NewGroupContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/NewGroup/NewGroupActions.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/SideBar/SideBarReducer.js",["248"],"import SideBar from \"./SideBar\"\n\nconst initialState = {\n  selectedChatItem: 0\n}\n\nfunction SideBarReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'UPDATE_SELECTED_CHATITEM':\n      return { ...state, selectedChatItem: action.payload }\n    case 'REINITIALIZE_CLIENT':\n      return { ...state, selectedChatItem: 0 }\n    case 'RESET_SELECTED_CHATITEM':\n      return { ...state, selectedChatItem: 0 }\n    default:\n      return state\n  }\n\n}\n\nexport default SideBarReducer;","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/WelcomeBody/WelcomeBody.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/ChatHeader/ChatHeaderActions.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Profile/Profile.js",["249"],"import React from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './Profile.scss';\n\nimport MainNav from '../MainNav/MainNavContainer';\nimport FriendItem from '../FriendItem/FriendItemContainer';\nimport NotificationItem from '../NotificationItem/NotificationItemContainer';\nimport GroupItem from '../GroupItem/GroupItem';\n\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayData: {}\n    }\n  }\n\n  componentWillMount() {\n    console.log(this.props);\n    fetch(`${window.location.protocol}//${window.location.host}/api/search/getAccountData/${this.props.match.params.id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId: this.props.AccountDetails.acc_data._id\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        this.setState({ displayData: data });\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper_profile\">\n        <MainNav />\n\n        <div className=\"profile\">\n          <div className=\"profile-header\">\n            <div className=\"profile-header-img\">\n              <h1>\n                {this.state.displayData.acc_usrname ?\n                  this.state.displayData.acc_usrname.charAt(0)\n                  :\n                  ''}\n              </h1>\n            </div>\n            <div className=\"profile-header-details\">\n              <h1>\n                {this.state.displayData.acc_usrname}\n              </h1>\n              <p>{this.state.displayData.acc_gender} | {new Date().getFullYear() - new Date(this.state.displayData.acc_dob).getFullYear()}</p>\n            </div>\n          </div>\n          <hr />\n          <div className=\"profile-body\">\n            <div className=\"profile-body-bio\">\n              <h3>\n                Biography:\n              </h3>\n              <p>\n                {this.state.displayData.acc_bio}\n              </p>\n            </div>\n            <hr />\n            <div className=\"profile-body-relations\">\n              <div className=\"profile-body-relations_friends\">\n                <h3>Friends</h3>\n                <div className=\"profile-body-relations_friends_section\">\n                  {\n                    this.state.displayData.acc_friends\n                      ?\n                      this.state.displayData.acc_friends.map((accountItem) => (\n\n                        accountItem.frStatus == 'R_SENT'\n                          ?\n                          <NotificationItem\n                            key={uuidv4()}\n                            senderId={accountItem._id}\n                            notificationTitle={accountItem.acc_usrname}\n                            notificationLabel=\"Friend Request\"\n                            notificationType={'FRIEND_REQUEST'}\n                          />\n                          :\n                          <FriendItem\n                            key={uuidv4()}\n                            acc_id={accountItem._id}\n                            friendStatus={accountItem.frStatus}\n                            userName={accountItem.acc_usrname}\n                            fname={accountItem.acc_fname}\n                            lname={accountItem.acc_lname}\n                            searchData={accountItem}\n                          />\n\n                      )\n                      )\n                      :\n                      null\n                  }\n                </div>\n                {/* Spit out components for friends here! (FriendItem?) */}\n              </div>\n              <div className=\"profile-body-relations_groups\">\n                <h3>Groups</h3>\n                <div className=\"profile-body-relations_groups_section\">\n                  {/*  */}\n                  {\n                    this.state.displayData.acc_grps\n                      ?\n                      this.state.displayData.acc_grps.map((grp) => (\n                        <GroupItem g_title={grp.g_title} g_type={grp.g_type} g_size={grp.g_members.length} />\n                      ))\n                      :\n                      null\n                  }\n\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Profile);","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/Profile/ProfileContainer.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/App/GroupItem/GroupItem.js",[],{"ruleId":"250","severity":1,"message":"251","line":1,"column":40,"nodeType":"252","messageId":"253","endLine":1,"endColumn":47},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":163,"column":30,"nodeType":"260","messageId":"261","endLine":163,"endColumn":32},{"ruleId":"262","severity":1,"message":"263","line":172,"column":15,"nodeType":"264","endLine":172,"endColumn":94},{"ruleId":"250","severity":1,"message":"265","line":2,"column":47,"nodeType":"252","messageId":"253","endLine":2,"endColumn":52},{"ruleId":"266","severity":1,"message":"267","line":85,"column":32,"nodeType":"268","messageId":"269","endLine":85,"endColumn":34},{"ruleId":"270","severity":1,"message":"271","line":87,"column":15,"nodeType":"272","messageId":"273","endLine":97,"endColumn":16},{"ruleId":"258","severity":1,"message":"259","line":37,"column":14,"nodeType":"260","messageId":"261","endLine":37,"endColumn":16},{"ruleId":"258","severity":1,"message":"259","line":37,"column":49,"nodeType":"260","messageId":"261","endLine":37,"endColumn":51},{"ruleId":"258","severity":1,"message":"259","line":61,"column":61,"nodeType":"260","messageId":"261","endLine":61,"endColumn":63},{"ruleId":"262","severity":1,"message":"263","line":73,"column":35,"nodeType":"264","endLine":73,"endColumn":113},{"ruleId":"250","severity":1,"message":"274","line":5,"column":3,"nodeType":"252","messageId":"253","endLine":5,"endColumn":9},{"ruleId":"250","severity":1,"message":"275","line":8,"column":3,"nodeType":"252","messageId":"253","endLine":8,"endColumn":12},{"ruleId":"250","severity":1,"message":"276","line":9,"column":3,"nodeType":"252","messageId":"253","endLine":9,"endColumn":14},{"ruleId":"258","severity":1,"message":"259","line":65,"column":18,"nodeType":"260","messageId":"261","endLine":65,"endColumn":20},{"ruleId":"258","severity":1,"message":"259","line":105,"column":28,"nodeType":"260","messageId":"261","endLine":105,"endColumn":30},{"ruleId":"250","severity":1,"message":"277","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},{"ruleId":"250","severity":1,"message":"277","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},{"ruleId":"258","severity":1,"message":"259","line":23,"column":20,"nodeType":"260","messageId":"261","endLine":23,"endColumn":22},{"ruleId":"258","severity":1,"message":"259","line":27,"column":23,"nodeType":"260","messageId":"261","endLine":27,"endColumn":25},{"ruleId":"258","severity":1,"message":"259","line":42,"column":19,"nodeType":"260","messageId":"261","endLine":42,"endColumn":21},{"ruleId":"258","severity":1,"message":"278","line":58,"column":37,"nodeType":"260","messageId":"261","endLine":58,"endColumn":39},{"ruleId":"258","severity":1,"message":"259","line":64,"column":42,"nodeType":"260","messageId":"261","endLine":64,"endColumn":44},{"ruleId":"258","severity":1,"message":"259","line":71,"column":42,"nodeType":"260","messageId":"261","endLine":71,"endColumn":44},{"ruleId":"258","severity":1,"message":"259","line":78,"column":40,"nodeType":"260","messageId":"261","endLine":78,"endColumn":42},{"ruleId":"250","severity":1,"message":"277","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},{"ruleId":"254","replacedBy":"279"},{"ruleId":"256","replacedBy":"280"},{"ruleId":"270","severity":1,"message":"271","line":10,"column":9,"nodeType":"272","messageId":"273","endLine":155,"endColumn":10},{"ruleId":"266","severity":1,"message":"267","line":70,"column":51,"nodeType":"268","messageId":"269","endLine":70,"endColumn":53},{"ruleId":"258","severity":1,"message":"259","line":71,"column":40,"nodeType":"260","messageId":"261","endLine":71,"endColumn":42},{"ruleId":"266","severity":1,"message":"267","line":103,"column":45,"nodeType":"268","messageId":"269","endLine":103,"endColumn":47},{"ruleId":"258","severity":1,"message":"259","line":104,"column":37,"nodeType":"260","messageId":"261","endLine":104,"endColumn":39},{"ruleId":"258","severity":1,"message":"259","line":60,"column":34,"nodeType":"260","messageId":"261","endLine":60,"endColumn":36},{"ruleId":"250","severity":1,"message":"281","line":1,"column":27,"nodeType":"252","messageId":"253","endLine":1,"endColumn":36},{"ruleId":"258","severity":1,"message":"259","line":52,"column":31,"nodeType":"260","messageId":"261","endLine":52,"endColumn":33},{"ruleId":"258","severity":1,"message":"259","line":60,"column":34,"nodeType":"260","messageId":"261","endLine":60,"endColumn":36},{"ruleId":"258","severity":1,"message":"259","line":67,"column":38,"nodeType":"260","messageId":"261","endLine":67,"endColumn":40},{"ruleId":"250","severity":1,"message":"282","line":7,"column":28,"nodeType":"252","messageId":"253","endLine":7,"endColumn":47},{"ruleId":"258","severity":1,"message":"259","line":32,"column":25,"nodeType":"260","messageId":"261","endLine":32,"endColumn":27},{"ruleId":"250","severity":1,"message":"283","line":1,"column":8,"nodeType":"252","messageId":"253","endLine":1,"endColumn":15},{"ruleId":"258","severity":1,"message":"259","line":83,"column":46,"nodeType":"260","messageId":"261","endLine":83,"endColumn":48},"no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","no-native-reassign",["284"],"no-negated-in-lhs",["285"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Label' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Button' is defined but never used.","'ModalBody' is defined but never used.","'ModalFooter' is defined but never used.","'useState' is defined but never used.","Expected '!==' and instead saw '!='.",["284"],["285"],"'useEffect' is defined but never used.","'setNotificationType' is assigned a value but never used.","'SideBar' is defined but never used.","no-global-assign","no-unsafe-negation"]