[{"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/index.js":"1","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/components/App.js":"2","/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/components/Login/Login.js":"3"},{"size":230,"mtime":1607684857249,"results":"4","hashOfConfig":"5"},{"size":181,"mtime":1607594293070,"results":"6","hashOfConfig":"5"},{"size":7723,"mtime":1607986701073,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"v7pl0u",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/index.js",[],["16","17"],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/components/App.js",[],"/Users/vip/Desktop/github projects/mern-stack-project/mern-chat-app/src/components/Login/Login.js",["18","19","20","21","22","23"],"import React from 'react';\nimport './Login.scss';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Label, Input, Form, FormGroup } from 'reactstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Login\n      userName: \"\",\n      password: \"\",\n\n      // New Account\n      nafname: \"\",\n      nalname: \"\",\n      nausername: \"\",\n      naemailaddr: \"\",\n      napassword1: \"\",\n      napassword2: \"\",\n      nadobday: 1,\n      nadobmonth: 1,\n      nadobyear: (new Date()).getFullYear(),\n      nagender: \"N\",\n      modal: false\n    };\n    // Login Request Handler\n    this.handleLogin = this.handleLogin.bind(this);\n    // Modal Trigger\n    this.toggleModal = this.toggleModal.bind(this);\n    // SetOnChange (State Managing Callback)\n    this.setOnChange = this.setOnChange.bind(this);\n    // Create Account Request Handler\n    this.handleNewAccount = this.handleNewAccount.bind(this);\n  }\n\n  handleLogin(event) {\n    event.preventDefault();\n    fetch(`${window.location.protocol}//${window.location.host}/api/authenticate/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: this.state.userName,\n        password: this.state.password\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n      })\n  }\n\n  // Create Account Handlers\n  setOnChange(event) {\n    let fieldID = event.target.id;\n    let obj = {};\n    obj[`${fieldID}`] = event.target.value;\n    console.log(obj);\n    this.setState(obj);\n  }\n\n  // Handles Modal Triggering\n  toggleModal() {\n    console.log(!this.state.modal);\n    this.setState({ modal: !this.state.modal })\n  }\n\n  handleNewAccount(event) {\n\n    // Check #1: Check if passwords match:\n\n    // Check #2 Check if username is being used already:\n\n    // Check #3 Check if email is being used already:\n    fetch(`${window.location.protocol}//${window.location.host}/api/authenticate/newaccount`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        nafname: this.state.nafname,\n        nalname: this.state.nalname,\n        nausername: this.state.nausername,\n        naemailaddr: this.state.naemailaddr,\n        napassword1: this.state.napassword1,\n        napassword2: this.state.napassword2,\n        nadobday: this.state.nadobday,\n        nadobmonth: this.state.nadobmonth,\n        nadobyear: this.state.nadobyear,\n        nagender: this.state.nagender\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n      })\n  }\n\n\n\n  render() {\n    let days = [];\n    let months = [];\n    let years = [];\n    for (let i = 1; i <= 31; i++) { days.push(i); }\n    for (let i = 1; i <= 12; i++) { months.push(i); }\n    for (let i = 1900; i <= (new Date()).getFullYear(); i++) { years.push(i); }\n    return (\n      <div className=\"wrapper fadeInDown\" onSubmit={this.handleLogin}>\n        <div id=\"formContent\">\n          <div className=\"wrapper-img fadeIn first\">\n            <img src=\"https://img.icons8.com/cute-clipart/256/000000/chat.png\" id=\"icon\" />\n          </div>\n\n          <form>\n            <input type=\"text\" id=\"userName\" className=\"fadeIn second\" name=\"userName\" placeholder=\"Username\" onChange={this.setOnChange} />\n            <input type=\"password\" id=\"password\" className=\"fadeIn third\" name=\"password\" placeholder=\"Password\" onChange={this.setOnChange} />\n            <input type=\"submit\" className=\"fadeIn fourth\" value=\"Log In\" />\n          </form>\n\n          <div id=\"formFooter\">\n            <a className=\"underlineHover\" href=\"#\">Forgot Password?</a>\n          </div>\n          <div id=\"formFooter\">\n            <button className=\"createAccount fadeIn fifth\" onClick={this.toggleModal}>Create Account</button>\n            {/* newAccount Modal */}\n            <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n              <ModalHeader toggle={this.toggleModal}><h3>Sign Up</h3></ModalHeader>\n              <ModalBody>\n                <form className=\"createAccount-form container\">\n                  <div className=\"createAccount-form-name\">\n                    {/* Name Fields */}\n                    <input type=\"text\" id=\"nafname\" name=\"nafname\" placeholder=\"First Name\" onChange={this.setOnChange} />\n                    <input type=\"text\" id=\"nalname\" name=\"nalname\" placeholder=\"Last Name\" onChange={this.setOnChange} />\n                  </div>\n                  {/* Email Field */}\n                  <div className=\"createAccount-form-email\">\n                    <input type=\"text\" id=\"naemailaddr\" name=\"naemailaddr\" placeholder=\"Email Address\" onChange={this.setOnChange} />\n                  </div>\n                  {/* Username Field */}\n                  <div className=\"createAccount-form-username\">\n                    <input type=\"text\" id=\"nausername\" name=\"nausername\" placeholder=\"User Name\" onChange={this.setOnChange} />\n                  </div>\n                  {/* Password Fields */}\n                  <div className=\"createAccount-form-password\">\n                    <input type=\"password\" id=\"napassword1\" name=\"napassword1\" placeholder=\"Password\" onChange={this.setOnChange} />\n                    <input type=\"password\" id=\"napassword2\" name=\"napassword2\" placeholder=\"Confirm\" onChange={this.setOnChange} />\n                  </div>\n                  <div className=\"createAccount-form-dob-label\">\n                    <h6>Date Of Birth:</h6>\n                  </div>\n                  {/* Date Of Birth Selectors: */}\n                  <div className=\"createAccount-form-dob\">\n                    <select onChange={this.setOnChange} name=\"nadobday\" id=\"nadobday\" className=\"dob-day\" value={this.state.nadobday}>\n                      {days.map((val, idx) => (\n                        <option value={val}>{val}</option>\n                      ))\n                      }\n                    </select>\n                    <select onChange={this.setOnChange} name=\"nadobmonth\" id=\"nadobmonth\" className=\"dob-month\" value={this.state.nadobmonth}>\n                      {months.map((val, idx) => (\n                        <option value={val}>{val}</option>\n                      ))\n                      }\n                    </select>\n                    <select onChange={this.setOnChange} name=\"nadobyear\" id=\"nadobyear\" className=\"dob-year\" value={this.state.nadobyear}>\n                      {years.map((val, idx) => (\n                        <option value={val}>{val}</option>\n                      ))\n                      }\n                    </select>\n                  </div>\n                  {/* Gender Selector: */}\n                  <div className=\"createAccount-form-gender-label\">\n                    <h6>Gender:</h6>\n                  </div>\n                  <select onChange={this.setOnChange} name=\"nagender\" id=\"nagender\" className=\"createAccount-form-gender\">\n                    <option value=\"N\">---Choose A Gender Option---</option>\n                    <option value=\"M\">Male</option>\n                    <option value=\"F\">Female</option>\n                  </select>\n                </form>\n              </ModalBody>\n              <ModalFooter>\n                <button className=\"signUp\" onClick={this.handleNewAccount}>Create Account</button>\n                {/* Adds Space: {' '} */}\n                {/* <button onClick={this.toggleModal}>Cancel</button> */}\n              </ModalFooter>\n            </Modal>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Login;",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":3,"column":54,"nodeType":"30","messageId":"31","endLine":3,"endColumn":59},{"ruleId":"28","severity":1,"message":"32","line":3,"column":61,"nodeType":"30","messageId":"31","endLine":3,"endColumn":66},{"ruleId":"28","severity":1,"message":"33","line":3,"column":68,"nodeType":"30","messageId":"31","endLine":3,"endColumn":72},{"ruleId":"28","severity":1,"message":"34","line":3,"column":74,"nodeType":"30","messageId":"31","endLine":3,"endColumn":83},{"ruleId":"35","severity":1,"message":"36","line":117,"column":13,"nodeType":"37","endLine":117,"endColumn":92},{"ruleId":"38","severity":1,"message":"39","line":127,"column":13,"nodeType":"37","endLine":127,"endColumn":52},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]